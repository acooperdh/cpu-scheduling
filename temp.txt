// checks the task queue and based on the current time will add a new task to the ready queue 
// when it arrives. then will determine which task is shortest currently and move that to the front of the ready queue 
bool check_ready_queue(Queue* tasks, Queue* ready_queue, int current_time){
    if (ready_queue->size == 0){
        void* first_element = queue_dequeue(tasks);
        Task* task = (Task*)first_element;
        printf("T%d\t%d\t%d\n", task->number, task->arrival, task->burst);
        task->start_time = current_time;
        queue_enqueue(ready_queue, task);
        return false;
    }
    else if (current_time == ((Task*)queue_peek(tasks))->arrival){
        void* current_element = queue_peek(ready_queue);
        void* new_element = queue_peek(tasks);
        Task* current_task = (Task*)current_element;
        Task* new_task = (Task*)new_element;
        if (current_task->remaining > new_task->remaining){
            queue_add_at(ready_queue, 0, new_element);
            return true;
        }
        else{
            //want to store the ready queue after current task to ensure that it is in order of burst times
            queue_enqueue(ready_queue, queue_dequeue(tasks));
            return false;
        }
        return true;
    }
    return false;
}
// preemptive shortest job first 
void psjf(Queue* queue, FILE* fp){
    fprintf(fp, "\nPSJF:\n");
    int current_time = 0;
    Queue* finished_queue = queue_initialize(sizeof(int)*TASK_SIZE);
    Queue* ready_queue = queue_initialize(sizeof(int)*TASK_SIZE);
    int num_of_tasks = queue->size;
    // want to check the next task in the ready queue each time we go thru the loop
    bool new_element = check_ready_queue(queue, ready_queue, current_time);
    // used to store the task from the previous loop
    void* previous = queue_peek(ready_queue);
    
    while(ready_queue->size > 0){
        void* next_element = queue_peek(ready_queue);
        Task* task = (Task*)next_element;
        Task* previous_task = (Task*)previous;
        if (new_element == false){
            task->remaining -= 1;
            previous = next_element;
        }else{
            printf("there is a new element taking the previous elements spot in time\n");
            printf("T%d\t%d\t%d\n", previous_task->number, previous_task->start_time, previous_task->end_time);
            previous = next_element;
            task->remaining -= 1;
            if (task->remaining == 0){
                task->end_time = current_time;
                printf("T%d\t%d\t%d\n", previous_task->number, previous_task->start_time, previous_task->end_time);
                void* finish = queue_dequeue(ready_queue);
                queue_enqueue(finished_queue, finish);
                continue;
            }
        }
        current_time+=1;
        new_element = check_ready_queue(queue, ready_queue, current_time);
    }
    // only when there is a change in the task that is being executed should there be an entry to say 
    // that a new task has been started 
    return;
